import os
import subprocess
import shutil

class RTKPOSTRunner():
    """
    Class to run the RTKPOST executable with specified arguments.
    This class is designed to be used as a service for processing GNSS data.
    It provides different methods to run the RTKPOST executable with the specified arguments.
    """
    
    # SYNOPSIS
    # rnx2rtkp [option ...] file file [...]
    # 
    # DESCRIPTION
    # Read RINEX OBS/NAV/GNAV/HNAV/CLK, SP3, SBAS message log files and compute receiver (rover)
    # positions and output position solutions.
    # The first RINEX OBS file shall contain receiver (rover) observations. For the relative mode, the second
    # RINEX OBS file shall contain reference (base station) receiver observations. At least one RINEX
    # NAV/GNAV/HNAV file shall be included in input files. To use SP3 precise ephemeris, specify the path in
    # the files. The extension of the SP3 file shall be .sp3 or .eph. All of the input file paths can include
    # wild‐cards (*). To avoid command line deployment of wild‐cards, use ʺ...ʺ for paths with wild‐cards.
    # Command line options are as follows ([]:default). With ‐k option, the processing options are input from the
    # configuration file. In this case, command line options precede options in the configuration file. For the
    # configuration file, refer B.4.
    # 
    # OPTIONS
    # -?    print help
    # -k    file input options from configuration file [off]
    # -o    file set output file [stdout]
    # -ts   ds ts start day/time (ds=y/m/d ts=h:m:s) [obs start time]
    # -te   de te end day/time (de=y/m/d te=h:m:s) [obs end time]
    # -ti   tint time interval (sec) [all]
    
    # -p    mode mode (0:single,1:dgps,2:kinematic,3:static,4:moving-base,5:fixed,6:ppp-kinematic,7:ppp-static) [2]
    # -m    mask elevation mask angle (deg) [15]
    # -f    freq number of frequencies for relative mode (1:L1,2:L1+L2,3:L1+L2+L5) [2]
    # -v    thres validation threshold for integer ambiguity (0.0:no AR) [3.0]
    # -b    backward solutions [off]
    # -c    forward/backward combined solutions [off]
    # -i    instantaneous integer ambiguity resolution [off]
    # -h    fix and hold for integer ambiguity resolution [off]
    # -e    output x/y/z-ecef position [latitude/longitude/height]
    # -a    output e/n/u-baseline [latitude/longitude/height]
    # -n    output NMEA-0183 GGA sentence [off]
    # -g    output latitude/longitude in the form of ddd mm ss.ss [ddd.ddd]
    # -t    output time in the form of yyyy/mm/dd hh:mm:ss.ss [sssss.ss]
    # -u    output time in utc [gpst]
    # -d    col number of decimals in time [3]
    # -s    sep field separator [' ']
    # -r    x y z reference (base) receiver ecef pos (m) [average of single pos]
    # -l    lat lon hgt reference (base) receiver latitude/longitude/height (deg/m)
    # -y    level output solution status (0:off,1:states,2:residuals) [0]
    # -x    level debug trace level (0:off) [0]
    
    # IMPORTANT: we use the -k option to read the configuration file instead of passing the arguments directly.
    #            This is because the configuration can be easily generated by using the RTKPOST executable
    
    _rtkpost_path: str
    """Path to the RTKPOST executable."""
    
    _rtkpost_config: dict
    """Configuration items for RTKPOST."""
    
    def __init__(self, rnx2rtkp_path: str = None):
        """
        Initialize the RTKPOSTRunner with the path to the RTKPOST executable.
        
        Args:
            rnx2rtkp_path (str): Path to the RTKPOST executable. If None, it will use the current working directory.
        """
        if rnx2rtkp_path is None or not os.path.isfile(rnx2rtkp_path):
            self._rtkpost_path = os.path.join(os.path.dirname(__file__), '..', '..', 'rtklib_2.4.2', 'bin', 'rnx2rtkp.exe')
        else:
            self._rtkpost_path = rnx2rtkp_path
        
        self._rtkpost_config = {
            'pos1-posmode': 'ppp-static',
            'pos1-frequency': 'l1+l2',
            'pos1-soltype': 'forward',
            'pos1-elmask': '15',
            'pos1-snrmask_r': 'off',
            'pos1-snrmask_b': 'off',
            'pos1-snrmask_L1': '0,0,0,0,0,0,0,0,0',
            'pos1-snrmask_L2': '0,0,0,0,0,0,0,0,0',
            'pos1-snrmask_L5': '0,0,0,0,0,0,0,0,0',
            'pos1-dynamics': 'off',
            'pos1-tidecorr': 'off',
            'pos1-ionoopt': 'brdc',
            'pos1-tropopt': 'est-ztd',
            'pos1-sateph': 'precise',
            'pos1-posopt1': 'off',
            'pos1-posopt2': 'off',
            'pos1-posopt3': 'off',
            'pos1-posopt4': 'off',
            'pos1-posopt5': 'off',
            'pos1-exclsats': '',
            'pos1-navsys': '1',
            'pos2-armode': 'continuous',
            'pos2-gloarmode': 'on',
            'pos2-arthres': '3',
            'pos2-arlockcnt': '0',
            'pos2-arelmask': '0',
            'pos2-arminfix': '10',
            'pos2-elmaskhold': '0',
            'pos2-aroutcnt': '5',
            'pos2-maxage': '30',
            'pos2-syncsol': 'off',
            'pos2-slipthres': '0.05',
            'pos2-rejionno': '30',
            'pos2-rejgdop': '30',
            'pos2-niter': '1',
            'pos2-baselen': '0',
            'pos2-basesig': '0',
            'out-solformat': 'xyz',
            'out-outhead': 'on',
            'out-outopt': 'on',
            'out-timesys': 'gpst',
            'out-timeform': 'hms',
            'out-timendec': '3',
            'out-degform': 'deg',
            'out-fieldsep': '',
            'out-height': 'ellipsoidal',
            'out-geoid': 'internal',
            'out-solstatic': 'all',
            'out-nmeaintv1': '0',
            'out-nmeaintv2': '0',
            'out-outstat': 'off',
            'stats-eratio1': '100',
            'stats-eratio2': '100',
            'stats-errphase': '0.003',
            'stats-errphaseel': '0.003',
            'stats-errphasebl': '0',
            'stats-errdoppler': '10',
            'stats-stdbias': '30',
            'stats-stdiono': '0.03',
            'stats-stdtrop': '0.3',
            'stats-prnaccelh': '10',
            'stats-prnaccelv': '10',
            'stats-prnbias': '0.0001',
            'stats-prniono': '0.001',
            'stats-prntrop': '0.0001',
            'stats-clkstab': '5e-12',
            'ant1-postype': 'llh',
            'ant1-pos1': '90',
            'ant1-pos2': '0',
            'ant1-pos3': '-6335367.6285',
            'ant1-anttype': '',
            'ant1-antdele': '0',
            'ant1-antdeln': '0',
            'ant1-antdelu': '0',
            'ant2-postype': 'single',
            'ant2-pos1': '0',
            'ant2-pos2': '0',
            'ant2-pos3': '0',
            'ant2-anttype': '',
            'ant2-antdele': '0',
            'ant2-antdeln': '0',
            'ant2-antdelu': '0',
            'misc-timeinterp': 'off',
            'misc-sbasatsel': '0',
            'misc-rnxopt1': '',
            'misc-rnxopt2': '',
            'file-satantfile': '',
            'file-rcvantfile': '',
            'file-staposfile': '',
            'file-geoidfile': '',
            'file-ionofile': '',
            'file-dcbfile': '',
            'file-eopfile': '',
            'file-blqfile': '',
            'file-tempdir': '',
            'file-geexefile': '',
            'file-solstatfile': '',
            'file-tracefile': ''
        }
        pass
    
    def processBase(self, workdir: str, outFile: str, baseObsFile: str, navFile: str, sp3File: str, ionexFile: str, additionalArgs: dict, logFunction) -> str:
        """
        Process the base station data using RTKPOST.
        
        Args:
            workdir (str): Working directory for processing.
            outFile (str): Output file name.
            baseObsFile (str): Base station observation file.
            navFile (str): Navigation file.
            sp3File (str): SP3 file.
            ionexFile (str): IONEX file.
        
        Returns:
            str: Path to the output file.
        """
        
        # copy rnx2rtkp to the working directory
        rnx2rtkpFileName = os.path.basename(self._rtkpost_path)
        shutil.copy(self._rtkpost_path, os.path.join(workdir, rnx2rtkpFileName))
        # copy the base observation file to the working directory
        baseObsFileName = os.path.basename(baseObsFile)
        shutil.copy(baseObsFile, os.path.join(workdir, baseObsFileName))
        # all the other files are already in the working directory...
        navFileName = os.path.basename(navFile)
        sp3FileName = os.path.basename(sp3File)
        ionexFileName = os.path.basename(ionexFile)
        outFileName = os.path.basename(outFile)
        
        # change the working directory to the one specified
        os.chdir(workdir)
        
        # update the configuration
        self._rtkpost_config['pos1-posmode'] = 'ppp-static'
        self._rtkpost_config['misc-timeinterp'] = 'off'
        self._rtkpost_config['file-staposfile'] = ''
        # create the configuration file
        configFileName = 'process_base.conf'
        # save the configuration to the file
        self.saveConfig(configFileName)
        
        # Run the RTKPOST executable with the configuration file
        args = [rnx2rtkpFileName]
        args += ['-k', configFileName]
        args += ['-o', outFileName]
        # args += ['-p', str(7)]   # [mode]        mode (0:single,1:dgps,2:kinematic,3:static,4:moving-base,5:fixed,6:ppp-kinematic,7:ppp-static) [2]
        # args += ['-m', 15]     # [mask]        elevation mask angle (deg) [15]
        # args += ['-f', 2]      # [freq]        number of frequencies for relative mode (1:L1,2:L1+L2,3:L1+L2+L5) [2]
        # args += ['-v', 3]      # [thres]       validation threshold for integer ambiguity (0.0:no AR) [3.0]
        # args += ['-b']         #               backward solutions [off]
        # args += ['-c']         #               forward/backward combined solutions [off]
        # args += ['-i']         #               instantaneous integer ambiguity resolution [off]
        # args += ['-h']         #               fix and hold for integer ambiguity resolution [off]
        # args += ['-e']           #               output x/y/z-ecef position [latitude/longitude/height]
        # args += ['-a']           #               output e/n/u-baseline [latitude/longitude/height]
        # args += ['-n', ]       #               output NMEA-0183 GGA sentence [off]
        # args += ['-g', ]       #               output latitude/longitude in the form of ddd mm ss.ss [ddd.ddd]
        # args += ['-t']           #               output time in the form of yyyy/mm/dd hh:mm:ss.ss [sssss.ss]
        # args += ['-u', ]       #               output time in utc [gpst]
        # args += ['-d', ]       # [col]         number of decimals in time [3]
        # args += ['-s', ]       # [sep]         field separator [' ']
        # args += ['-r', ]       # [x y z]       reference (base) receiver ecef pos (m) [average of single pos]
        # args += ['-l', ]       # [lat lon hgt] reference (base) receiver latitude/longitude/height (deg/m)
        # args += ['-y', ]       # [level]       output solution status (0:off,1:states,2:residuals) [0]
        # args += ['-x', str(5)] # [level]       debug trace level (0:off) [0]
        
        for key, value in additionalArgs.items():
            args += [key, str(value)]
        
        # The first RINEX OBS file shall contain receiver (rover) observations. 
        # For the relative mode, the second RINEX OBS file shall contain reference (base station) receiver observations. 
        # At least one RINEX NAV/GNAV/HNAV file shall be included in input files. 
        # To use SP3 precise ephemeris, specify the path in the files. The extension of the SP3 file shall be .sp3 or .eph. 
        # All of the input file paths can include wild‐cards (*). To avoid command line deployment of wild‐cards, use ʺ...ʺ for paths with wild‐cards.
        # Command line options are as follows ([]:default). With ‐k option, the processing options are input from the configuration file. 
        # In this case, command line options precede options in the configuration file. For the configuration file, refer B.4.
        args += [baseObsFileName, navFileName, sp3FileName, ionexFileName]
        
        self.runRtkPost(args, logFunction)
        
        return outFile
        
    def processRover(self, workdir: str, outFile: str, roverObsFile: str, baseObsFile: str, basePosFile: str, navFile: str, sp3File: str, ionexFile: str, additionalArgs: dict, logFunction) -> str:
        """
        Process the rover data using RTKPOST.
        
        Args:
            workdir (str): Working directory for processing.
            outFile (str): Output file name.
            roverObsFile (str): Rover observation file.
            baseObsFile (str): Base station observation file.
            basePosFile (str): Base station position file.
            navFile (str): Navigation file.
            sp3File (str): SP3 file.
            ionexFile (str): IONEX file.
        """
        
        # copy rnx2rtkp to the working directory if not already there
        rnx2rtkpFileName = os.path.basename(self._rtkpost_path)
        if not os.path.isfile(os.path.join(workdir, rnx2rtkpFileName)):
            shutil.copy(self._rtkpost_path, os.path.join(workdir, rnx2rtkpFileName))
        # copy the base observation file to the working directory if not already there
        baseObsFileName = os.path.basename(baseObsFile)
        if not os.path.isfile(os.path.join(workdir, baseObsFileName)):
            shutil.copy(baseObsFile, os.path.join(workdir, baseObsFileName))
        # copy the rover observation file to the working directory
        roverObsFileName = os.path.basename(roverObsFile)
        if not os.path.isfile(os.path.join(workdir, roverObsFileName)):
            shutil.copy(roverObsFile, os.path.join(workdir, roverObsFileName))
        
        # all the other files are already in the working directory...
        basePosFileName = os.path.basename(basePosFile)
        navFileName = os.path.basename(navFile)
        sp3FileName = os.path.basename(sp3File)
        ionexFileName = os.path.basename(ionexFile)
        outFileName = os.path.basename(outFile)
        
        # change the working directory to the one specified
        os.chdir(workdir)
        
        # update the configuration
        self._rtkpost_config['pos1-posmode'] = 'kinematic'
        self._rtkpost_config['misc-timeinterp'] = 'on'
        self._rtkpost_config['file-staposfile'] = basePosFileName
        # create the configuration file
        configFileName = 'process_rover.conf'
        # save the configuration to the file
        self.saveConfig(configFileName)
        
        # Run the RTKPOST executable with the configuration file
        args = [rnx2rtkpFileName]
        args += ['-k', configFileName]
        args += ['-o', outFileName]
        # args += ['-p', str(2)]   # [mode]        mode (0:single,1:dgps,2:kinematic,3:static,4:moving-base,5:fixed,6:ppp-kinematic,7:ppp-static) [2]
        # args += ['-m', 15]     # [mask]        elevation mask angle (deg) [15]
        # args += ['-f', 2]      # [freq]        number of frequencies for relative mode (1:L1,2:L1+L2,3:L1+L2+L5) [2]
        # args += ['-v', 3]      # [thres]       validation threshold for integer ambiguity (0.0:no AR) [3.0]
        # args += ['-b']         #               backward solutions [off]
        # args += ['-c']         #               forward/backward combined solutions [off]
        # args += ['-i']         #               instantaneous integer ambiguity resolution [off]
        # args += ['-h']         #               fix and hold for integer ambiguity resolution [off]
        # args += ['-e']           #               output x/y/z-ecef position [latitude/longitude/height]
        # args += ['-a']           #               output e/n/u-baseline [latitude/longitude/height]
        # args += ['-n', ]       #               output NMEA-0183 GGA sentence [off]
        # args += ['-g', ]       #               output latitude/longitude in the form of ddd mm ss.ss [ddd.ddd]
        # args += ['-t']           #               output time in the form of yyyy/mm/dd hh:mm:ss.ss [sssss.ss]
        # args += ['-u', ]       #               output time in utc [gpst]
        # args += ['-d', ]       # [col]         number of decimals in time [3]
        # args += ['-s', ]       # [sep]         field separator [' ']
        # args += ['-r', ]       # [x y z]       reference (base) receiver ecef pos (m) [average of single pos]
        # args += ['-l', ]       # [lat lon hgt] reference (base) receiver latitude/longitude/height (deg/m)
        # args += ['-y', ]       # [level]       output solution status (0:off,1:states,2:residuals) [0]
        # args += ['-x', str(5)] # [level]       debug trace level (0:off) [0]
        
        for key, value in additionalArgs.items():
            args += [key, str(value)]
        
        args += [roverObsFileName, baseObsFileName, navFileName, sp3FileName, ionexFileName]
        
        self.runRtkPost(args, logFunction)
        
        return outFile
        
    def runRtkPost(self, args: list, logFunction):
        """Run the RTKPOST executable with the specified arguments."""
        try:
            if os.name == 'posix':  # Check if the operating system is Linux/Unix
                args = ['wine'] + args  # Use wine to run the executable                
            logFunction(f"Executing " + " ".join(args))
            logFunction("Check the terminal to monitor the output of RTKPOST")
            process = subprocess.Popen(args)
            process.communicate()
        except Exception as e:
            raise Exception(f"Error running RTKPOST: {e}", "error")
    
    def saveConfig(self, configFile: str):
        """Save the configuration to a file."""
        with open(configFile, 'w') as f:
            for key, value in self._rtkpost_config.items():
                f.write(f"{key}\t={value}\n")